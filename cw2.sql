SELECT 'DROP TABLE ' || TABLE_NAME || ' CASCADE CONSTRAINTS;' 
FROM user_tables;

DROP TABLE COUNTRIES CASCADE CONSTRAINTS;
DROP TABLE DEPARTMENTS CASCADE CONSTRAINTS;
DROP TABLE EMPLOYEES CASCADE CONSTRAINTS;
DROP TABLE JOBS CASCADE CONSTRAINTS;
DROP TABLE JOB_HISTORY CASCADE CONSTRAINTS;
DROP TABLE LOCATIONS CASCADE CONSTRAINTS;
DROP TABLE REGIONS CASCADE CONSTRAINTS;

CREATE TABLE COUNTRIES AS SELECT * FROM hr.countries;
CREATE TABLE DEPARTMENTS AS SELECT * FROM hr.departments;
CREATE TABLE EMPLOYEES AS SELECT * FROM hr.employees;
CREATE TABLE JOB_GRADES AS SELECT * FROM hr.job_grades;
CREATE TABLE JOB_HISTORY AS SELECT * FROM hr.job_history;
CREATE TABLE JOBS AS SELECT * FROM hr.jobs;
CREATE TABLE LOCATIONS AS SELECT * FROM hr.locations;
CREATE TABLE REGIONS AS SELECT * FROM hr.regions;

ALTER TABLE COUNTRIES
    ADD PRIMARY KEY(COUNTRY_ID)
    ADD CHECK("COUNTRY_ID" IS NOT NULL);
    
ALTER TABLE DEPARTMENTS
    ADD PRIMARY KEY(DEPARTMENT_ID)
    ADD CHECK("DEPARTMENT_NAME" IS NOT NULL);

ALTER TABLE EMPLOYEES
    ADD PRIMARY KEY(EMPLOYEE_ID)
    ADD CHECK("EMAIL" IS NOT NULL)
    ADD CHECK("HIRE_DATE" IS NOT NULL)
    ADD CHECK("JOB_ID" IS NOT NULL)
    ADD CHECK("LAST_NAME" IS NOT NULL)
    ADD CHECK(salary > 0)
    ADD UNIQUE(EMAIL);

ALTER TABLE JOB_GRADES
    ADD PRIMARY KEY(GRADE);

ALTER TABLE JOB_HISTORY
    ADD PRIMARY KEY(EMPLOYEE_ID, START_DATE)
    ADD CHECK(end_date > start_date)
    ADD CHECK("EMPLOYEE_ID" IS NOT NULL)
    ADD CHECK("END_DATE" IS NOT NULL)
    ADD CHECK("JOB_ID" IS NOT NULL)
    ADD CHECK("START_DATE" IS NOT NULL);

ALTER TABLE JOBS
    ADD PRIMARY KEY(JOB_ID)
    ADD CHECK("JOB_TITLE" IS NOT NULL);

ALTER TABLE LOCATIONS
    ADD PRIMARY KEY(LOCATION_ID)
    ADD CHECK("CITY" IS NOT NULL);

ALTER TABLE REGIONS
    ADD PRIMARY KEY(REGION_ID)
    ADD CHECK("REGION_ID" IS NOT NULL);

ALTER TABLE COUNTRIES
    ADD FOREIGN KEY(REGION_ID) REFERENCES REGIONS(REGION_ID);

ALTER TABLE DEPARTMENTS
    ADD FOREIGN KEY(LOCATION_ID) REFERENCES LOCATIONS(LOCATION_ID)
    ADD FOREIGN KEY(MANAGER_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID);

ALTER TABLE EMPLOYEES
    ADD FOREIGN KEY(DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID)
    ADD FOREIGN KEY(JOB_ID) REFERENCES JOBS(JOB_ID)
    ADD FOREIGN KEY(MANAGER_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID);

ALTER TABLE JOB_HISTORY
    ADD FOREIGN KEY(DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID)
    ADD FOREIGN KEY(EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
    ADD FOREIGN KEY(JOB_ID) REFERENCES JOBS(JOB_ID);

ALTER TABLE LOCATIONS
    ADD FOREIGN KEY(COUNTRY_ID) REFERENCES COUNTRIES(COUNTRY_ID);

-- ZADANIE 1
SELECT LAST_NAME||' '||SALARY AS Wynagrodzenie FROM EMPLOYEES
WHERE department_id IN (20, 50) AND salary BETWEEN 2000 AND 7000
ORDER BY last_name;

--ZADANIE 2
SELECT HIRE_DATE, LAST_NAME FROM EMPLOYEES
WHERE manager_id IN (
    SELECT EMPLOYEE_ID FROM EMPLOYEES WHERE EXTRACT(year FROM hire_date) = 2005
    )
ORDER BY &user_defined;

--ZADANIE 3
SELECT FIRST_NAME||' '||LAST_NAME AS Employee, SALARY, PHONE_NUMBER FROM EMPLOYEES
WHERE last_name LIKE '__e%' AND LOWER(first_name) LIKE LOWER('%&user_defined%')
ORDER BY Employee DESC, SALARY ASC;

--ZADANIE 4
SELECT FIRST_NAME||' '||LAST_NAME AS Employee,
    ROUND(MONTHS_BETWEEN(CURRENT_DATE, hire_date)) AS Months_Working, 
    CASE 
        WHEN ROUND(MONTHS_BETWEEN(CURRENT_DATE, hire_date)) < 150 THEN '10%' 
        WHEN ROUND(MONTHS_BETWEEN(CURRENT_DATE, hire_date)) < 200 THEN '20%' 
        ELSE '30%'
    END 
FROM EMPLOYEES
ORDER BY Months_working;

--ZADANIE 5
SELECT DEPARTMENTS.DEPARTMENT_NAME, SUM(EMPLOYEES.SALARY), ROUND(AVG(EMPLOYEES.SALARY))
FROM DEPARTMENTS JOIN EMPLOYEES ON DEPARTMENTS.DEPARTMENT_ID = EMPLOYEES.DEPARTMENT_ID
GROUP BY DEPARTMENTS.DEPARTMENT_NAME
HAVING MIN(employees.salary) > 5000;

--ZADANIE 6
SELECT EMPLOYEES.LAST_NAME, DEPARTMENTS.DEPARTMENT_ID, DEPARTMENTS.DEPARTMENT_NAME, EMPLOYEES.JOB_ID
FROM EMPLOYEES JOIN DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
WHERE employees.department_id IN(
    SELECT DEPARTMENTS.DEPARTMENT_ID 
    FROM DEPARTMENTS JOIN LOCATIONS ON DEPARTMENTS.LOCATION_ID = LOCATIONS.LOCATION_ID
    WHERE locations.city = 'Toronto'
);

--ZADANIE 7
SELECT FIRST_NAME, LAST_NAME, DEPARTMENT_ID
FROM EMPLOYEES
WHERE department_id IN(
    SELECT DEPARTMENT_ID 
    FROM EMPLOYEES
    WHERE first_name = 'Jennifer'
);

--ZADANIE 8
SELECT DEPARTMENT_NAME
FROM DEPARTMENTS
WHERE department_id IN(
    SELECT DEPARTMENTS.DEPARTMENT_ID
    FROM DEPARTMENTS LEFT JOIN EMPLOYEES ON DEPARTMENTS.DEPARTMENT_ID = EMPLOYEES.DEPARTMENT_ID
    GROUP BY DEPARTMENTS.DEPARTMENT_ID
    HAVING COUNT(employees.employee_id) = 0
);

--ZADANIE 10
SELECT EMPLOYEES.FIRST_NAME, EMPLOYEES.LAST_NAME, EMPLOYEES.JOB_ID, DEPARTMENTS.DEPARTMENT_NAME, EMPLOYEES.SALARY, JOB_GRADES.GRADE
FROM JOB_GRADES, EMPLOYEES JOIN DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
WHERE employees.salary BETWEEN job_grades.min_salary AND job_grades.max_salary;

--ZADANIE 11
SELECT FIRST_NAME, LAST_NAME, SALARY
FROM EMPLOYEES
WHERE salary>(
    SELECT AVG(SALARY)
    FROM EMPLOYEES
    )
ORDER BY salary DESC;

--ZADANIE 12
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME
FROM EMPLOYEES
WHERE department_id IN(
    SELECT DEPARTMENT_ID 
    FROM EMPLOYEES
    WHERE LOWER(last_name) LIKE '%u%'
)
AND (LOWER(last_name) NOT LIKE '%u%'
OR department_id IN(
    SELECT DEPARTMENT_ID 
    FROM EMPLOYEES
    WHERE LOWER(last_name) LIKE '%u%'
    GROUP BY DEPARTMENT_ID
    HAVING COUNT(employee_id) > 1
    )
);